
Led Flahsher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000005d2  00000666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800080  00800080  00000686  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001680  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a92  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f56  00000000  00000000  00002a36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000063c  00000000  00000000  0000398c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d0f  00000000  00000000  00003fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001571  00000000  00000000  00004cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00006248  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_1>
   8:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_2>
   c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 43 02 	jmp	0x486	; 0x486 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 95 02 	jmp	0x52a	; 0x52a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "avr/delay.h"
int main(void)
{
	
	
	DIO_Init();
  92:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_Init>
    /* Replace with your application code */
	u8 i;
    while (1) 
    {
		
		for(i=0;i<=7;i++)
  96:	c0 e0       	ldi	r28, 0x00	; 0
		{
			DIO_WritePin(i,HIGH);
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	8c 2f       	mov	r24, r28
  9c:	0e 94 6c 00 	call	0xd8	; 0xd8 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	81 ee       	ldi	r24, 0xE1	; 225
  a4:	94 e0       	ldi	r25, 0x04	; 4
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x14>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x1e>
  b0:	00 00       	nop
    /* Replace with your application code */
	u8 i;
    while (1) 
    {
		
		for(i=0;i<=7;i++)
  b2:	cf 5f       	subi	r28, 0xFF	; 255
  b4:	c8 30       	cpi	r28, 0x08	; 8
  b6:	81 f7       	brne	.-32     	; 0x98 <main+0x6>
  b8:	c7 e0       	ldi	r28, 0x07	; 7
		}
		
		
		for(i=PINA7;i>=PINA0;i--)
		{
			DIO_WritePin(i,LOW);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	8c 2f       	mov	r24, r28
  be:	0e 94 6c 00 	call	0xd8	; 0xd8 <DIO_WritePin>
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	81 ee       	ldi	r24, 0xE1	; 225
  c6:	94 e0       	ldi	r25, 0x04	; 4
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x36>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x40>
  d2:	00 00       	nop
			DIO_WritePin(i,HIGH);
			_delay_ms(200);
		}
		
		
		for(i=PINA7;i>=PINA0;i--)
  d4:	c1 50       	subi	r28, 0x01	; 1
  d6:	f1 cf       	rjmp	.-30     	; 0xba <main+0x28>

000000d8 <DIO_WritePin>:
		break;
		case PC:
		PORTC=value;
		break;
		case PD:
		PORTD=value;
  d8:	98 2f       	mov	r25, r24
  da:	96 95       	lsr	r25
  dc:	96 95       	lsr	r25
  de:	96 95       	lsr	r25
  e0:	87 70       	andi	r24, 0x07	; 7
  e2:	61 30       	cpi	r22, 0x01	; 1
  e4:	e1 f5       	brne	.+120    	; 0x15e <DIO_WritePin+0x86>
  e6:	91 30       	cpi	r25, 0x01	; 1
  e8:	99 f0       	breq	.+38     	; 0x110 <DIO_WritePin+0x38>
  ea:	28 f0       	brcs	.+10     	; 0xf6 <DIO_WritePin+0x1e>
  ec:	92 30       	cpi	r25, 0x02	; 2
  ee:	e9 f0       	breq	.+58     	; 0x12a <DIO_WritePin+0x52>
  f0:	93 30       	cpi	r25, 0x03	; 3
  f2:	41 f1       	breq	.+80     	; 0x144 <DIO_WritePin+0x6c>
  f4:	08 95       	ret
  f6:	4b b3       	in	r20, 0x1b	; 27
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_WritePin+0x2c>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	8a 95       	dec	r24
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_WritePin+0x28>
 108:	cb 01       	movw	r24, r22
 10a:	84 2b       	or	r24, r20
 10c:	8b bb       	out	0x1b, r24	; 27
 10e:	08 95       	ret
 110:	48 b3       	in	r20, 0x18	; 24
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	b9 01       	movw	r22, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_WritePin+0x46>
 11a:	66 0f       	add	r22, r22
 11c:	77 1f       	adc	r23, r23
 11e:	8a 95       	dec	r24
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_WritePin+0x42>
 122:	cb 01       	movw	r24, r22
 124:	84 2b       	or	r24, r20
 126:	88 bb       	out	0x18, r24	; 24
 128:	08 95       	ret
 12a:	45 b3       	in	r20, 0x15	; 21
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	b9 01       	movw	r22, r18
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_WritePin+0x60>
 134:	66 0f       	add	r22, r22
 136:	77 1f       	adc	r23, r23
 138:	8a 95       	dec	r24
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_WritePin+0x5c>
 13c:	cb 01       	movw	r24, r22
 13e:	84 2b       	or	r24, r20
 140:	85 bb       	out	0x15, r24	; 21
 142:	08 95       	ret
 144:	42 b3       	in	r20, 0x12	; 18
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	b9 01       	movw	r22, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_WritePin+0x7a>
 14e:	66 0f       	add	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	8a 95       	dec	r24
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_WritePin+0x76>
 156:	cb 01       	movw	r24, r22
 158:	84 2b       	or	r24, r20
 15a:	82 bb       	out	0x12, r24	; 18
 15c:	08 95       	ret
 15e:	61 11       	cpse	r22, r1
 160:	3f c0       	rjmp	.+126    	; 0x1e0 <DIO_WritePin+0x108>
 162:	91 30       	cpi	r25, 0x01	; 1
 164:	a1 f0       	breq	.+40     	; 0x18e <DIO_WritePin+0xb6>
 166:	28 f0       	brcs	.+10     	; 0x172 <DIO_WritePin+0x9a>
 168:	92 30       	cpi	r25, 0x02	; 2
 16a:	f9 f0       	breq	.+62     	; 0x1aa <DIO_WritePin+0xd2>
 16c:	93 30       	cpi	r25, 0x03	; 3
 16e:	59 f1       	breq	.+86     	; 0x1c6 <DIO_WritePin+0xee>
 170:	08 95       	ret
 172:	4b b3       	in	r20, 0x1b	; 27
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	b9 01       	movw	r22, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_WritePin+0xa8>
 17c:	66 0f       	add	r22, r22
 17e:	77 1f       	adc	r23, r23
 180:	8a 95       	dec	r24
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_WritePin+0xa4>
 184:	cb 01       	movw	r24, r22
 186:	80 95       	com	r24
 188:	84 23       	and	r24, r20
 18a:	8b bb       	out	0x1b, r24	; 27
 18c:	08 95       	ret
 18e:	48 b3       	in	r20, 0x18	; 24
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	b9 01       	movw	r22, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_WritePin+0xc4>
 198:	66 0f       	add	r22, r22
 19a:	77 1f       	adc	r23, r23
 19c:	8a 95       	dec	r24
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_WritePin+0xc0>
 1a0:	cb 01       	movw	r24, r22
 1a2:	80 95       	com	r24
 1a4:	84 23       	and	r24, r20
 1a6:	88 bb       	out	0x18, r24	; 24
 1a8:	08 95       	ret
 1aa:	45 b3       	in	r20, 0x15	; 21
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	b9 01       	movw	r22, r18
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_WritePin+0xe0>
 1b4:	66 0f       	add	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	8a 95       	dec	r24
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_WritePin+0xdc>
 1bc:	cb 01       	movw	r24, r22
 1be:	80 95       	com	r24
 1c0:	84 23       	and	r24, r20
 1c2:	85 bb       	out	0x15, r24	; 21
 1c4:	08 95       	ret
 1c6:	42 b3       	in	r20, 0x12	; 18
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	b9 01       	movw	r22, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_WritePin+0xfc>
 1d0:	66 0f       	add	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	8a 95       	dec	r24
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_WritePin+0xf8>
 1d8:	cb 01       	movw	r24, r22
 1da:	80 95       	com	r24
 1dc:	84 23       	and	r24, r20
 1de:	82 bb       	out	0x12, r24	; 18
 1e0:	08 95       	ret

000001e2 <DIO_Init>:
	
	
}

void DIO_Init(void)
{
 1e2:	e0 e6       	ldi	r30, 0x60	; 96
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
	DIO_Pin_type i;
	for(i=PINA0;i<Total_Pins;i++)
 1e6:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			CLR_BIT(DDRA,pin_num);
			CLR_BIT(PORTA,pin_num);
			break;
			case PB:
			CLR_BIT(DDRB,pin_num);
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	50 e0       	ldi	r21, 0x00	; 0
void DIO_Init(void)
{
	DIO_Pin_type i;
	for(i=PINA0;i<Total_Pins;i++)
	{
		DIO_InitPin(i,PinsStatusArray[i]);
 1ec:	91 91       	ld	r25, Z+
 */ 
#include "DIO_Interface.h"
#include "DIO_Private.h"
static void DIO_InitPin(DIO_Pin_type pin,DIO_PinStatus_type status)
{
	DIO_Port_type port=pin/8;
 1ee:	28 2f       	mov	r18, r24
 1f0:	26 95       	lsr	r18
 1f2:	26 95       	lsr	r18
 1f4:	26 95       	lsr	r18
	u8 pin_num=pin%8;
 1f6:	38 2f       	mov	r19, r24
 1f8:	37 70       	andi	r19, 0x07	; 7
	
	switch (status)
 1fa:	91 30       	cpi	r25, 0x01	; 1
 1fc:	09 f4       	brne	.+2      	; 0x200 <DIO_Init+0x1e>
 1fe:	80 c0       	rjmp	.+256    	; 0x300 <DIO_Init+0x11e>
 200:	18 f0       	brcs	.+6      	; 0x208 <DIO_Init+0x26>
 202:	92 30       	cpi	r25, 0x02	; 2
 204:	a9 f1       	breq	.+106    	; 0x270 <DIO_Init+0x8e>
 206:	bf c0       	rjmp	.+382    	; 0x386 <DIO_Init+0x1a4>
	{
		case OUTPUT:
		switch (port)
 208:	21 30       	cpi	r18, 0x01	; 1
 20a:	89 f0       	breq	.+34     	; 0x22e <DIO_Init+0x4c>
 20c:	28 f0       	brcs	.+10     	; 0x218 <DIO_Init+0x36>
 20e:	22 30       	cpi	r18, 0x02	; 2
 210:	c9 f0       	breq	.+50     	; 0x244 <DIO_Init+0x62>
 212:	23 30       	cpi	r18, 0x03	; 3
 214:	11 f1       	breq	.+68     	; 0x25a <DIO_Init+0x78>
 216:	b7 c0       	rjmp	.+366    	; 0x386 <DIO_Init+0x1a4>
		{
			case PA:
			SET_BIT(DDRA,pin_num);
 218:	9a b3       	in	r25, 0x1a	; 26
 21a:	ba 01       	movw	r22, r20
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_Init+0x40>
 21e:	66 0f       	add	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	3a 95       	dec	r19
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_Init+0x3c>
 226:	9b 01       	movw	r18, r22
 228:	29 2b       	or	r18, r25
 22a:	2a bb       	out	0x1a, r18	; 26
 22c:	ac c0       	rjmp	.+344    	; 0x386 <DIO_Init+0x1a4>
			break;
			case PB:
			SET_BIT(DDRB,pin_num);
 22e:	97 b3       	in	r25, 0x17	; 23
 230:	ba 01       	movw	r22, r20
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_Init+0x56>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	3a 95       	dec	r19
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_Init+0x52>
 23c:	9b 01       	movw	r18, r22
 23e:	29 2b       	or	r18, r25
 240:	27 bb       	out	0x17, r18	; 23
 242:	a1 c0       	rjmp	.+322    	; 0x386 <DIO_Init+0x1a4>
			break;
			case PC:
			SET_BIT(DDRC,pin_num);
 244:	94 b3       	in	r25, 0x14	; 20
 246:	ba 01       	movw	r22, r20
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_Init+0x6c>
 24a:	66 0f       	add	r22, r22
 24c:	77 1f       	adc	r23, r23
 24e:	3a 95       	dec	r19
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_Init+0x68>
 252:	9b 01       	movw	r18, r22
 254:	29 2b       	or	r18, r25
 256:	24 bb       	out	0x14, r18	; 20
 258:	96 c0       	rjmp	.+300    	; 0x386 <DIO_Init+0x1a4>
			break;
			case PD:
			SET_BIT(DDRD,pin_num);
 25a:	91 b3       	in	r25, 0x11	; 17
 25c:	ba 01       	movw	r22, r20
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_Init+0x82>
 260:	66 0f       	add	r22, r22
 262:	77 1f       	adc	r23, r23
 264:	3a 95       	dec	r19
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_Init+0x7e>
 268:	9b 01       	movw	r18, r22
 26a:	29 2b       	or	r18, r25
 26c:	21 bb       	out	0x11, r18	; 17
 26e:	8b c0       	rjmp	.+278    	; 0x386 <DIO_Init+0x1a4>
			break;
		}
		break;
		case INPULL:
		switch (port)
 270:	21 30       	cpi	r18, 0x01	; 1
 272:	b1 f0       	breq	.+44     	; 0x2a0 <DIO_Init+0xbe>
 274:	28 f0       	brcs	.+10     	; 0x280 <DIO_Init+0x9e>
 276:	22 30       	cpi	r18, 0x02	; 2
 278:	19 f1       	breq	.+70     	; 0x2c0 <DIO_Init+0xde>
 27a:	23 30       	cpi	r18, 0x03	; 3
 27c:	89 f1       	breq	.+98     	; 0x2e0 <DIO_Init+0xfe>
 27e:	83 c0       	rjmp	.+262    	; 0x386 <DIO_Init+0x1a4>
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
 280:	9a b3       	in	r25, 0x1a	; 26
 282:	ba 01       	movw	r22, r20
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_Init+0xa8>
 286:	66 0f       	add	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	3a 95       	dec	r19
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_Init+0xa4>
 28e:	9b 01       	movw	r18, r22
 290:	36 2f       	mov	r19, r22
 292:	30 95       	com	r19
 294:	93 23       	and	r25, r19
 296:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,pin_num);
 298:	9b b3       	in	r25, 0x1b	; 27
 29a:	29 2b       	or	r18, r25
 29c:	2b bb       	out	0x1b, r18	; 27
 29e:	73 c0       	rjmp	.+230    	; 0x386 <DIO_Init+0x1a4>
			break;
			case PB:
			CLR_BIT(DDRB,pin_num);
 2a0:	97 b3       	in	r25, 0x17	; 23
 2a2:	ba 01       	movw	r22, r20
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_Init+0xc8>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	3a 95       	dec	r19
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_Init+0xc4>
 2ae:	9b 01       	movw	r18, r22
 2b0:	36 2f       	mov	r19, r22
 2b2:	30 95       	com	r19
 2b4:	93 23       	and	r25, r19
 2b6:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,pin_num);
 2b8:	98 b3       	in	r25, 0x18	; 24
 2ba:	29 2b       	or	r18, r25
 2bc:	28 bb       	out	0x18, r18	; 24
 2be:	63 c0       	rjmp	.+198    	; 0x386 <DIO_Init+0x1a4>
			break;
			case PC:
			CLR_BIT(DDRC,pin_num);
 2c0:	94 b3       	in	r25, 0x14	; 20
 2c2:	ba 01       	movw	r22, r20
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_Init+0xe8>
 2c6:	66 0f       	add	r22, r22
 2c8:	77 1f       	adc	r23, r23
 2ca:	3a 95       	dec	r19
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_Init+0xe4>
 2ce:	9b 01       	movw	r18, r22
 2d0:	36 2f       	mov	r19, r22
 2d2:	30 95       	com	r19
 2d4:	93 23       	and	r25, r19
 2d6:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,pin_num);
 2d8:	95 b3       	in	r25, 0x15	; 21
 2da:	29 2b       	or	r18, r25
 2dc:	25 bb       	out	0x15, r18	; 21
 2de:	53 c0       	rjmp	.+166    	; 0x386 <DIO_Init+0x1a4>
			break;
			case PD:
			CLR_BIT(DDRD,pin_num);
 2e0:	91 b3       	in	r25, 0x11	; 17
 2e2:	ba 01       	movw	r22, r20
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_Init+0x108>
 2e6:	66 0f       	add	r22, r22
 2e8:	77 1f       	adc	r23, r23
 2ea:	3a 95       	dec	r19
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_Init+0x104>
 2ee:	9b 01       	movw	r18, r22
 2f0:	36 2f       	mov	r19, r22
 2f2:	30 95       	com	r19
 2f4:	93 23       	and	r25, r19
 2f6:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,pin_num);
 2f8:	92 b3       	in	r25, 0x12	; 18
 2fa:	29 2b       	or	r18, r25
 2fc:	22 bb       	out	0x12, r18	; 18
 2fe:	43 c0       	rjmp	.+134    	; 0x386 <DIO_Init+0x1a4>
			break;
		}
		break;
		case INFREE:
		switch (port)
 300:	21 30       	cpi	r18, 0x01	; 1
 302:	a9 f0       	breq	.+42     	; 0x32e <DIO_Init+0x14c>
 304:	28 f0       	brcs	.+10     	; 0x310 <DIO_Init+0x12e>
 306:	22 30       	cpi	r18, 0x02	; 2
 308:	09 f1       	breq	.+66     	; 0x34c <DIO_Init+0x16a>
 30a:	23 30       	cpi	r18, 0x03	; 3
 30c:	71 f1       	breq	.+92     	; 0x36a <DIO_Init+0x188>
 30e:	3b c0       	rjmp	.+118    	; 0x386 <DIO_Init+0x1a4>
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
 310:	9a b3       	in	r25, 0x1a	; 26
 312:	ba 01       	movw	r22, r20
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_Init+0x138>
 316:	66 0f       	add	r22, r22
 318:	77 1f       	adc	r23, r23
 31a:	3a 95       	dec	r19
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_Init+0x134>
 31e:	9b 01       	movw	r18, r22
 320:	20 95       	com	r18
 322:	92 23       	and	r25, r18
 324:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,pin_num);
 326:	9b b3       	in	r25, 0x1b	; 27
 328:	29 23       	and	r18, r25
 32a:	2b bb       	out	0x1b, r18	; 27
 32c:	2c c0       	rjmp	.+88     	; 0x386 <DIO_Init+0x1a4>
			break;
			case PB:
			CLR_BIT(DDRB,pin_num);
 32e:	97 b3       	in	r25, 0x17	; 23
 330:	ba 01       	movw	r22, r20
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_Init+0x156>
 334:	66 0f       	add	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	3a 95       	dec	r19
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_Init+0x152>
 33c:	9b 01       	movw	r18, r22
 33e:	20 95       	com	r18
 340:	92 23       	and	r25, r18
 342:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,pin_num);
 344:	98 b3       	in	r25, 0x18	; 24
 346:	29 23       	and	r18, r25
 348:	28 bb       	out	0x18, r18	; 24
 34a:	1d c0       	rjmp	.+58     	; 0x386 <DIO_Init+0x1a4>
			break;
			case PC:
			CLR_BIT(DDRC,pin_num);
 34c:	94 b3       	in	r25, 0x14	; 20
 34e:	ba 01       	movw	r22, r20
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_Init+0x174>
 352:	66 0f       	add	r22, r22
 354:	77 1f       	adc	r23, r23
 356:	3a 95       	dec	r19
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_Init+0x170>
 35a:	9b 01       	movw	r18, r22
 35c:	20 95       	com	r18
 35e:	92 23       	and	r25, r18
 360:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,pin_num);
 362:	95 b3       	in	r25, 0x15	; 21
 364:	29 23       	and	r18, r25
 366:	25 bb       	out	0x15, r18	; 21
 368:	0e c0       	rjmp	.+28     	; 0x386 <DIO_Init+0x1a4>
			break;
			case PD:
			CLR_BIT(DDRD,pin_num);
 36a:	91 b3       	in	r25, 0x11	; 17
 36c:	ba 01       	movw	r22, r20
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_Init+0x192>
 370:	66 0f       	add	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	3a 95       	dec	r19
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_Init+0x18e>
 378:	9b 01       	movw	r18, r22
 37a:	20 95       	com	r18
 37c:	92 23       	and	r25, r18
 37e:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,pin_num);
 380:	92 b3       	in	r25, 0x12	; 18
 382:	29 23       	and	r18, r25
 384:	22 bb       	out	0x12, r18	; 18
}

void DIO_Init(void)
{
	DIO_Pin_type i;
	for(i=PINA0;i<Total_Pins;i++)
 386:	8f 5f       	subi	r24, 0xFF	; 255
 388:	80 32       	cpi	r24, 0x20	; 32
 38a:	09 f0       	breq	.+2      	; 0x38e <DIO_Init+0x1ac>
 38c:	2f cf       	rjmp	.-418    	; 0x1ec <DIO_Init+0xa>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
	}
 38e:	08 95       	ret

00000390 <__vector_1>:
		break;
	}
}
/*******************************ISR********************************/
ISR(INT0_vect)
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	2f 93       	push	r18
 39c:	3f 93       	push	r19
 39e:	4f 93       	push	r20
 3a0:	5f 93       	push	r21
 3a2:	6f 93       	push	r22
 3a4:	7f 93       	push	r23
 3a6:	8f 93       	push	r24
 3a8:	9f 93       	push	r25
 3aa:	af 93       	push	r26
 3ac:	bf 93       	push	r27
 3ae:	ef 93       	push	r30
 3b0:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
 3b2:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <INT0_Fptr>
 3b6:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <INT0_Fptr+0x1>
 3ba:	30 97       	sbiw	r30, 0x00	; 0
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <__vector_1+0x30>
	{
		INT0_Fptr();
 3be:	09 95       	icall
	}
}
 3c0:	ff 91       	pop	r31
 3c2:	ef 91       	pop	r30
 3c4:	bf 91       	pop	r27
 3c6:	af 91       	pop	r26
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	7f 91       	pop	r23
 3ce:	6f 91       	pop	r22
 3d0:	5f 91       	pop	r21
 3d2:	4f 91       	pop	r20
 3d4:	3f 91       	pop	r19
 3d6:	2f 91       	pop	r18
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <__vector_2>:
ISR(INT1_vect)
{
 3e2:	1f 92       	push	r1
 3e4:	0f 92       	push	r0
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	0f 92       	push	r0
 3ea:	11 24       	eor	r1, r1
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 404:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <INT1_Fptr>
 408:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <INT1_Fptr+0x1>
 40c:	30 97       	sbiw	r30, 0x00	; 0
 40e:	09 f0       	breq	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		INT1_Fptr();
 410:	09 95       	icall
	}
}
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <__vector_3>:
ISR(INT2_vect)
{
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	2f 93       	push	r18
 440:	3f 93       	push	r19
 442:	4f 93       	push	r20
 444:	5f 93       	push	r21
 446:	6f 93       	push	r22
 448:	7f 93       	push	r23
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
 44e:	af 93       	push	r26
 450:	bf 93       	push	r27
 452:	ef 93       	push	r30
 454:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 456:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__data_end>
 45a:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__data_end+0x1>
 45e:	30 97       	sbiw	r30, 0x00	; 0
 460:	09 f0       	breq	.+2      	; 0x464 <__vector_3+0x30>
	{
		INT2_Fptr();
 462:	09 95       	icall
	}	
}
 464:	ff 91       	pop	r31
 466:	ef 91       	pop	r30
 468:	bf 91       	pop	r27
 46a:	af 91       	pop	r26
 46c:	9f 91       	pop	r25
 46e:	8f 91       	pop	r24
 470:	7f 91       	pop	r23
 472:	6f 91       	pop	r22
 474:	5f 91       	pop	r21
 476:	4f 91       	pop	r20
 478:	3f 91       	pop	r19
 47a:	2f 91       	pop	r18
 47c:	0f 90       	pop	r0
 47e:	0f be       	out	0x3f, r0	; 63
 480:	0f 90       	pop	r0
 482:	1f 90       	pop	r1
 484:	18 95       	reti

00000486 <__vector_9>:
{
	if(Timer1_OCB_Fptr!=NULLPTR)
	{
		Timer1_OCB_Fptr();
	}
}
 486:	1f 92       	push	r1
 488:	0f 92       	push	r0
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	0f 92       	push	r0
 48e:	11 24       	eor	r1, r1
 490:	2f 93       	push	r18
 492:	3f 93       	push	r19
 494:	4f 93       	push	r20
 496:	5f 93       	push	r21
 498:	6f 93       	push	r22
 49a:	7f 93       	push	r23
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
 4a0:	af 93       	push	r26
 4a2:	bf 93       	push	r27
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
 4a8:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <Timer1_OVF_Fptr>
 4ac:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <Timer1_OVF_Fptr+0x1>
 4b0:	30 97       	sbiw	r30, 0x00	; 0
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <__vector_9+0x30>
 4b4:	09 95       	icall
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	bf 91       	pop	r27
 4bc:	af 91       	pop	r26
 4be:	9f 91       	pop	r25
 4c0:	8f 91       	pop	r24
 4c2:	7f 91       	pop	r23
 4c4:	6f 91       	pop	r22
 4c6:	5f 91       	pop	r21
 4c8:	4f 91       	pop	r20
 4ca:	3f 91       	pop	r19
 4cc:	2f 91       	pop	r18
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <__vector_6>:
ISR(TIMER1_CAPT_vect)
{
 4d8:	1f 92       	push	r1
 4da:	0f 92       	push	r0
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	0f 92       	push	r0
 4e0:	11 24       	eor	r1, r1
 4e2:	2f 93       	push	r18
 4e4:	3f 93       	push	r19
 4e6:	4f 93       	push	r20
 4e8:	5f 93       	push	r21
 4ea:	6f 93       	push	r22
 4ec:	7f 93       	push	r23
 4ee:	8f 93       	push	r24
 4f0:	9f 93       	push	r25
 4f2:	af 93       	push	r26
 4f4:	bf 93       	push	r27
 4f6:	ef 93       	push	r30
 4f8:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=NULLPTR)
 4fa:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <Timer1_ICU_Fptr>
 4fe:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <Timer1_ICU_Fptr+0x1>
 502:	30 97       	sbiw	r30, 0x00	; 0
 504:	09 f0       	breq	.+2      	; 0x508 <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
 506:	09 95       	icall
	}
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	bf 91       	pop	r27
 50e:	af 91       	pop	r26
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	7f 91       	pop	r23
 516:	6f 91       	pop	r22
 518:	5f 91       	pop	r21
 51a:	4f 91       	pop	r20
 51c:	3f 91       	pop	r19
 51e:	2f 91       	pop	r18
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

0000052a <__vector_13>:
{
	UART_TX_Fptr = LocalFptr;
}
/***********************************************ISR ************************************************************/
ISR(USART_RXC_vect)
{
 52a:	1f 92       	push	r1
 52c:	0f 92       	push	r0
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	0f 92       	push	r0
 532:	11 24       	eor	r1, r1
 534:	2f 93       	push	r18
 536:	3f 93       	push	r19
 538:	4f 93       	push	r20
 53a:	5f 93       	push	r21
 53c:	6f 93       	push	r22
 53e:	7f 93       	push	r23
 540:	8f 93       	push	r24
 542:	9f 93       	push	r25
 544:	af 93       	push	r26
 546:	bf 93       	push	r27
 548:	ef 93       	push	r30
 54a:	ff 93       	push	r31
	if (UART_RX_Fptr!=NULLPTR)
 54c:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <UART_RX_Fptr>
 550:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <UART_RX_Fptr+0x1>
 554:	30 97       	sbiw	r30, 0x00	; 0
 556:	09 f0       	breq	.+2      	; 0x55a <__vector_13+0x30>
	{
		UART_RX_Fptr();
 558:	09 95       	icall
	}
}
 55a:	ff 91       	pop	r31
 55c:	ef 91       	pop	r30
 55e:	bf 91       	pop	r27
 560:	af 91       	pop	r26
 562:	9f 91       	pop	r25
 564:	8f 91       	pop	r24
 566:	7f 91       	pop	r23
 568:	6f 91       	pop	r22
 56a:	5f 91       	pop	r21
 56c:	4f 91       	pop	r20
 56e:	3f 91       	pop	r19
 570:	2f 91       	pop	r18
 572:	0f 90       	pop	r0
 574:	0f be       	out	0x3f, r0	; 63
 576:	0f 90       	pop	r0
 578:	1f 90       	pop	r1
 57a:	18 95       	reti

0000057c <__vector_15>:

ISR(USART_TXC_vect)
{
 57c:	1f 92       	push	r1
 57e:	0f 92       	push	r0
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	0f 92       	push	r0
 584:	11 24       	eor	r1, r1
 586:	2f 93       	push	r18
 588:	3f 93       	push	r19
 58a:	4f 93       	push	r20
 58c:	5f 93       	push	r21
 58e:	6f 93       	push	r22
 590:	7f 93       	push	r23
 592:	8f 93       	push	r24
 594:	9f 93       	push	r25
 596:	af 93       	push	r26
 598:	bf 93       	push	r27
 59a:	ef 93       	push	r30
 59c:	ff 93       	push	r31
	if (UART_TX_Fptr!=NULLPTR)
 59e:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <UART_TX_Fptr>
 5a2:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <UART_TX_Fptr+0x1>
 5a6:	30 97       	sbiw	r30, 0x00	; 0
 5a8:	09 f0       	breq	.+2      	; 0x5ac <__vector_15+0x30>
	{
		UART_TX_Fptr();
 5aa:	09 95       	icall
	}
}
 5ac:	ff 91       	pop	r31
 5ae:	ef 91       	pop	r30
 5b0:	bf 91       	pop	r27
 5b2:	af 91       	pop	r26
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	7f 91       	pop	r23
 5ba:	6f 91       	pop	r22
 5bc:	5f 91       	pop	r21
 5be:	4f 91       	pop	r20
 5c0:	3f 91       	pop	r19
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
